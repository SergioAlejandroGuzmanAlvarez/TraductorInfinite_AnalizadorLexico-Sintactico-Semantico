// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: src/Lexer.flex

import compilerTools.Token;


// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
class Lexer {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\37\u0100\1\u0200\267\u0100\10\u0300\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\3\1\4\1\5\22\0\1\1"+
    "\1\6\4\0\1\7\1\10\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\1\0\1\17\1\20\11\21\1\0\1\22"+
    "\1\23\1\24\1\25\1\0\1\26\1\27\1\30\1\31"+
    "\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\36"+
    "\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1\50"+
    "\1\51\1\52\1\53\1\36\1\54\1\55\1\56\4\0"+
    "\1\57\1\0\1\60\1\61\1\62\1\63\1\64\1\65"+
    "\1\36\1\66\1\67\2\36\1\70\1\36\1\71\1\72"+
    "\2\36\1\73\1\74\1\75\1\76\1\77\1\100\3\36"+
    "\1\101\1\102\1\103\7\0\1\3\73\0\1\36\7\0"+
    "\1\36\3\0\1\36\3\0\1\36\1\0\1\36\6\0"+
    "\1\36\1\0\1\36\4\0\1\36\7\0\1\36\3\0"+
    "\1\36\3\0\1\36\1\0\1\36\6\0\1\36\1\0"+
    "\1\36\u012b\0\2\3\326\0\u0100\3";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1024];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\2\2\1\3\2\1\1\4\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\2\13\1\14\1\15\1\16"+
    "\1\17\26\1\1\20\1\1\1\21\1\2\1\22\1\0"+
    "\1\23\1\24\1\25\2\0\1\26\1\27\1\30\1\31"+
    "\2\32\1\33\20\0\1\34\3\0\1\35\7\0\1\36"+
    "\2\0\1\37\21\0\1\40\2\0\1\41\1\42\1\0"+
    "\1\43\5\0\1\2\1\0\1\44\3\0\1\44\2\0"+
    "\1\45\1\46\1\44\4\0\1\47\1\50\2\0\1\51"+
    "\1\52\10\0\1\53\2\0\1\54\2\0\1\55\5\0"+
    "\1\56\1\57\20\0\1\60\1\61\3\0\1\62\1\63"+
    "\1\0\1\64";

  private static int [] zzUnpackAction() {
    int [] result = new int[190];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\104\0\104\0\210\0\314\0\u0110\0\u0154\0\104"+
    "\0\104\0\104\0\u0198\0\104\0\u01dc\0\u0220\0\u0264\0\u02a8"+
    "\0\104\0\u02ec\0\u0330\0\u0374\0\u03b8\0\u03fc\0\u0440\0\u0484"+
    "\0\u04c8\0\u050c\0\u0550\0\u0594\0\u05d8\0\u061c\0\u0660\0\u06a4"+
    "\0\u06e8\0\u072c\0\u0770\0\u07b4\0\u07f8\0\u083c\0\u0880\0\u08c4"+
    "\0\u0908\0\u094c\0\104\0\u0990\0\104\0\u09d4\0\104\0\u0154"+
    "\0\104\0\104\0\104\0\u0a18\0\u0a5c\0\u0a5c\0\104\0\104"+
    "\0\104\0\u0aa0\0\u0ae4\0\u0b28\0\u0b6c\0\u0bb0\0\u0bf4\0\u0c38"+
    "\0\u0c7c\0\u0cc0\0\u0d04\0\u0d48\0\u0d8c\0\u0dd0\0\u0e14\0\u0e58"+
    "\0\u0e9c\0\u0ee0\0\u0f24\0\u0f68\0\104\0\u0fac\0\u0ff0\0\u1034"+
    "\0\104\0\u1078\0\u10bc\0\u1100\0\u1144\0\u1188\0\u11cc\0\u1210"+
    "\0\104\0\u1254\0\u1298\0\u0a5c\0\u12dc\0\u1320\0\u1364\0\u13a8"+
    "\0\u13ec\0\u1430\0\u1474\0\u14b8\0\u14fc\0\u1540\0\u1584\0\u15c8"+
    "\0\u160c\0\u1650\0\u1694\0\u16d8\0\u171c\0\104\0\u1760\0\u17a4"+
    "\0\104\0\104\0\u17e8\0\104\0\u182c\0\u1870\0\u18b4\0\u18f8"+
    "\0\u193c\0\u1254\0\u1980\0\u19c4\0\u1a08\0\u1a4c\0\u1a90\0\u1ad4"+
    "\0\u1b18\0\u1b5c\0\104\0\104\0\104\0\u1ba0\0\u1be4\0\u1c28"+
    "\0\u1c6c\0\104\0\104\0\u1cb0\0\u1cf4\0\104\0\104\0\u1d38"+
    "\0\u1d7c\0\u1dc0\0\u1e04\0\u1e48\0\u1e8c\0\u1ed0\0\u1f14\0\104"+
    "\0\u1f58\0\u1f9c\0\104\0\u1fe0\0\u2024\0\104\0\u2068\0\u20ac"+
    "\0\u20f0\0\u2134\0\u2178\0\104\0\104\0\u21bc\0\u2200\0\u2244"+
    "\0\u2288\0\u22cc\0\u2310\0\u2354\0\u2398\0\u23dc\0\u2420\0\u2464"+
    "\0\u24a8\0\u24ec\0\u2530\0\u2574\0\u25b8\0\104\0\104\0\u25fc"+
    "\0\u2640\0\u2684\0\104\0\104\0\u26c8\0\104";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[190];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\0\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\2\2\1\31\1\32\4\2\1\33\1\34\1\2"+
    "\1\35\1\2\1\36\1\37\2\2\1\40\5\2\1\41"+
    "\1\2\1\42\1\43\1\44\1\2\1\45\3\2\1\46"+
    "\1\47\1\50\1\2\1\51\1\52\1\53\1\54\1\55"+
    "\106\0\1\3\107\0\1\56\104\0\1\57\75\0\2\60"+
    "\1\0\2\60\2\0\1\61\7\0\2\60\5\0\52\60"+
    "\17\0\1\62\105\0\1\63\100\0\1\64\70\0\2\65"+
    "\4\0\12\65\2\66\64\65\4\0\12\65\2\20\62\65"+
    "\24\0\1\67\103\0\1\70\103\0\1\71\77\0\1\72"+
    "\1\73\5\0\52\74\45\0\1\75\13\0\1\76\66\0"+
    "\1\77\111\0\1\100\106\0\1\101\100\0\1\102\100\0"+
    "\1\103\66\0\1\104\3\0\1\105\114\0\1\106\103\0"+
    "\1\107\66\0\1\110\14\0\1\111\72\0\1\112\142\0"+
    "\1\113\75\0\1\114\5\0\1\115\101\0\1\116\73\0"+
    "\1\117\11\0\1\120\76\0\1\121\3\0\1\122\76\0"+
    "\1\123\114\0\1\124\74\0\1\125\4\0\1\126\74\0"+
    "\1\127\105\0\1\130\117\0\1\131\1\0\2\56\1\3"+
    "\2\56\1\4\76\56\13\132\1\133\70\132\20\0\2\134"+
    "\111\0\52\72\23\0\2\73\5\0\52\72\23\0\2\74"+
    "\5\0\52\74\32\0\1\135\126\0\1\136\60\0\1\137"+
    "\107\0\1\140\120\0\1\141\72\0\1\142\117\0\1\143"+
    "\77\0\1\144\71\0\1\145\116\0\1\146\73\0\1\147"+
    "\7\0\1\150\1\151\73\0\1\152\105\0\1\153\107\0"+
    "\1\154\126\0\1\155\73\0\1\156\115\0\1\157\77\0"+
    "\1\160\106\0\1\161\105\0\1\162\103\0\1\163\101\0"+
    "\1\164\77\0\1\165\112\0\1\166\100\0\1\167\77\0"+
    "\1\170\14\0\13\132\1\171\103\132\1\171\3\132\1\172"+
    "\64\132\47\0\1\173\75\0\1\174\105\0\1\175\67\0"+
    "\1\176\105\0\1\177\122\0\1\200\66\0\1\201\77\0"+
    "\1\202\123\0\1\147\110\0\1\203\1\204\72\0\1\205"+
    "\66\0\1\205\103\0\1\206\125\0\1\207\71\0\1\210"+
    "\76\0\1\211\141\0\1\212\77\0\1\213\113\0\1\214"+
    "\105\0\1\215\101\0\1\216\73\0\1\217\102\0\1\220"+
    "\110\0\1\221\13\0\13\132\1\171\3\132\1\3\64\132"+
    "\37\0\1\222\115\0\1\223\63\0\1\147\121\0\1\224"+
    "\73\0\1\150\75\0\1\225\121\0\1\226\77\0\1\227"+
    "\107\0\1\230\63\0\1\231\106\0\1\232\104\0\1\205"+
    "\134\0\1\233\5\0\1\233\104\0\1\234\70\0\1\235"+
    "\107\0\1\236\60\0\1\237\114\0\1\240\75\0\1\241"+
    "\100\0\1\242\121\0\1\243\64\0\1\150\112\0\1\244"+
    "\100\0\1\245\130\0\1\216\75\0\1\246\61\0\1\147"+
    "\111\0\1\247\64\0\1\250\102\0\1\145\103\0\1\251"+
    "\2\0\1\252\4\0\1\253\130\0\1\254\65\0\1\205"+
    "\75\0\1\255\73\0\1\256\16\0\1\257\67\0\1\260"+
    "\126\0\1\261\120\0\1\262\43\0\1\263\77\0\1\264"+
    "\123\0\1\265\103\0\1\266\102\0\1\267\127\0\1\217"+
    "\62\0\1\270\72\0\1\271\102\0\1\272\110\0\1\273"+
    "\103\0\1\274\67\0\1\275\102\0\1\276\54\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[9996];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\11\4\1\3\11\1\1\1\11\4\1\1\11"+
    "\31\1\1\11\1\1\1\11\1\1\1\11\1\0\3\11"+
    "\2\0\1\1\3\11\3\1\20\0\1\11\3\0\1\11"+
    "\7\0\1\11\2\0\1\1\21\0\1\11\2\0\2\11"+
    "\1\0\1\11\5\0\1\1\1\0\1\1\3\0\1\1"+
    "\2\0\3\11\4\0\2\11\2\0\2\11\10\0\1\11"+
    "\2\0\1\11\2\0\1\11\5\0\2\11\20\0\2\11"+
    "\3\0\2\11\1\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[190];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
    private Token token(String lexeme, String lexicalComp, int line, int column){
        return new Token(lexeme, lexicalComp, line+1, column+1);
    }



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  public Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return token(yytext(), "ERROR_3", yyline, yycolumn);
            }
            // fall through
          case 53: break;
          case 2:
            { /*Ignorar*/
            }
            // fall through
          case 54: break;
          case 3:
            { return token(yytext(), "OPERADOR_DIFERENTEQUE", yyline, yycolumn);
            }
            // fall through
          case 55: break;
          case 4:
            { return token(yytext(), "ABRE_PARENTESIS", yyline, yycolumn);
            }
            // fall through
          case 56: break;
          case 5:
            { return token(yytext(), "CIERRA_PARENTESIS", yyline, yycolumn);
            }
            // fall through
          case 57: break;
          case 6:
            { return token(yytext(), "OPERADOR_MULTIPLICAR", yyline, yycolumn);
            }
            // fall through
          case 58: break;
          case 7:
            { return token(yytext(), "OPERADOR_MAS", yyline, yycolumn);
            }
            // fall through
          case 59: break;
          case 8:
            { return token(yytext(), "COMA", yyline, yycolumn);
            }
            // fall through
          case 60: break;
          case 9:
            { return token(yytext(), "OPERADOR_MENOS", yyline, yycolumn);
            }
            // fall through
          case 61: break;
          case 10:
            { return token(yytext(), "OPERADOR_DIVIDIR", yyline, yycolumn);
            }
            // fall through
          case 62: break;
          case 11:
            { return token(yytext(), "NUMERO", yyline, yycolumn);
            }
            // fall through
          case 63: break;
          case 12:
            { return token(yytext(), "FIN_DE_SENTENCIA", yyline, yycolumn);
            }
            // fall through
          case 64: break;
          case 13:
            { return token(yytext(), "OPERADOR_MENORQUE", yyline, yycolumn);
            }
            // fall through
          case 65: break;
          case 14:
            { return token(yytext(), "OPERADOR_ASIGNACION", yyline, yycolumn);
            }
            // fall through
          case 66: break;
          case 15:
            { return token(yytext(), "OPERADOR_MAYORQUE", yyline, yycolumn);
            }
            // fall through
          case 67: break;
          case 16:
            { return token(yytext(), "LLAVE_ABIERTA", yyline, yycolumn);
            }
            // fall through
          case 68: break;
          case 17:
            { return token(yytext(), "LLAVE_CERRADA", yyline, yycolumn);
            }
            // fall through
          case 69: break;
          case 18:
            { return token(yytext(), "OPERADOR_AND", yyline, yycolumn);
            }
            // fall through
          case 70: break;
          case 19:
            { return token(yytext(), "CADENA", yyline, yycolumn);
            }
            // fall through
          case 71: break;
          case 20:
            { return token(yytext(), "OPERADOR_INCREMENTO", yyline, yycolumn);
            }
            // fall through
          case 72: break;
          case 21:
            { return token(yytext(), "OPERADOR_DECREMENTO", yyline, yycolumn);
            }
            // fall through
          case 73: break;
          case 22:
            { return token(yytext(), "ERROR_2", yyline, yycolumn);
            }
            // fall through
          case 74: break;
          case 23:
            { return token(yytext(), "OPERADOR_MENORIGUALQUE", yyline, yycolumn);
            }
            // fall through
          case 75: break;
          case 24:
            { return token(yytext(), "OPERADOR_EQUIVALENCIA", yyline, yycolumn);
            }
            // fall through
          case 76: break;
          case 25:
            { return token(yytext(), "OPERADOR_MAYORIGUALQUE", yyline, yycolumn);
            }
            // fall through
          case 77: break;
          case 26:
            { return token(yytext(), "ERROR_1", yyline, yycolumn);
            }
            // fall through
          case 78: break;
          case 27:
            { return token(yytext(), "IDENTIFICADOR", yyline, yycolumn);
            }
            // fall through
          case 79: break;
          case 28:
            { return token(yytext(), "CICLO_DOWHILE", yyline, yycolumn);
            }
            // fall through
          case 80: break;
          case 29:
            { return token(yytext(), "INICIO_CONDICIONAL", yyline, yycolumn);
            }
            // fall through
          case 81: break;
          case 30:
            { return token(yytext(), "OPERADOR_OR", yyline, yycolumn);
            }
            // fall through
          case 82: break;
          case 31:
            { return token(yytext(), "NUMERO_DECIMAL", yyline, yycolumn);
            }
            // fall through
          case 83: break;
          case 32:
            { return token(yytext(), "TIPO_DE_DATO_DECIMAL", yyline, yycolumn);
            }
            // fall through
          case 84: break;
          case 33:
            { return token(yytext(), "CICLO_FOR", yyline, yycolumn);
            }
            // fall through
          case 85: break;
          case 34:
            { return token(yytext(), "TIPO_DE_DATO_ENTERO", yyline, yycolumn);
            }
            // fall through
          case 86: break;
          case 35:
            { return token(yytext(), "TIPO_DE_DATO_CADENA", yyline, yycolumn);
            }
            // fall through
          case 87: break;
          case 36:
            { return token(yytext(), "COLOR", yyline, yycolumn);
            }
            // fall through
          case 88: break;
          case 37:
            { return token(yytext(), "FUNCION_POSX", yyline, yycolumn);
            }
            // fall through
          case 89: break;
          case 38:
            { return token(yytext(), "FUNCION_POSY", yyline, yycolumn);
            }
            // fall through
          case 90: break;
          case 39:
            { return token(yytext(), "TIPO_DE_DATO_BOOLEANO", yyline, yycolumn);
            }
            // fall through
          case 91: break;
          case 40:
            { return token(yytext(), "SEGUIR_CONDICIONAL", yyline, yycolumn);
            }
            // fall through
          case 92: break;
          case 41:
            { return token(yytext(), "PALABRA_RESERVADA", yyline, yycolumn);
            }
            // fall through
          case 93: break;
          case 42:
            { return token(yytext(), "VERDADERO", yyline, yycolumn);
            }
            // fall through
          case 94: break;
          case 43:
            { return token(yytext(), "FUNCION_ROTAR", yyline, yycolumn);
            }
            // fall through
          case 95: break;
          case 44:
            { return token(yytext(), "FALSO", yyline, yycolumn);
            }
            // fall through
          case 96: break;
          case 45:
            { return token(yytext(), "CICLO_WHILE", yyline, yycolumn);
            }
            // fall through
          case 97: break;
          case 46:
            { return token(yytext(), "FUNCION_SALTAR", yyline, yycolumn);
            }
            // fall through
          case 98: break;
          case 47:
            { return token(yytext(), "FUNCION_SONIDO", yyline, yycolumn);
            }
            // fall through
          case 99: break;
          case 48:
            { return token(yytext(), "FUNCION_M_DER", yyline, yycolumn);
            }
            // fall through
          case 100: break;
          case 49:
            { return token(yytext(), "FUNCION_M_IZQ", yyline, yycolumn);
            }
            // fall through
          case 101: break;
          case 50:
            { return token(yytext(), "FUNCION_CREAROBJETO", yyline, yycolumn);
            }
            // fall through
          case 102: break;
          case 51:
            { return token(yytext(), "FUNCION_M_ABAJO", yyline, yycolumn);
            }
            // fall through
          case 103: break;
          case 52:
            { return token(yytext(), "FUNCION_M_ARRIBA", yyline, yycolumn);
            }
            // fall through
          case 104: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
